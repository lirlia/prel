// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/google_cloud_mock.gen.go -package=google_cloud_mock
//

// Package google_cloud_mock is a generated GoMock package.
package google_cloud_mock

import (
	google_cloud "prel/internal/gateway/google_cloud"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	cloudresourcemanager "google.golang.org/api/cloudresourcemanager/v1"
	iam "google.golang.org/api/iam/v1"
)

// MockListProjectsGetter is a mock of ListProjectsGetter interface.
type MockListProjectsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockListProjectsGetterMockRecorder
}

// MockListProjectsGetterMockRecorder is the mock recorder for MockListProjectsGetter.
type MockListProjectsGetterMockRecorder struct {
	mock *MockListProjectsGetter
}

// NewMockListProjectsGetter creates a new mock instance.
func NewMockListProjectsGetter(ctrl *gomock.Controller) *MockListProjectsGetter {
	mock := &MockListProjectsGetter{ctrl: ctrl}
	mock.recorder = &MockListProjectsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListProjectsGetter) EXPECT() *MockListProjectsGetterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListProjectsGetter) Do() (*cloudresourcemanager.ListProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*cloudresourcemanager.ListProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListProjectsGetterMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListProjectsGetter)(nil).Do))
}

// PageToken mocks base method.
func (m *MockListProjectsGetter) PageToken(token string) google_cloud.ListProjectsGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageToken", token)
	ret0, _ := ret[0].(google_cloud.ListProjectsGetter)
	return ret0
}

// PageToken indicates an expected call of PageToken.
func (mr *MockListProjectsGetterMockRecorder) PageToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageToken", reflect.TypeOf((*MockListProjectsGetter)(nil).PageToken), token)
}

// MockResourceManagerService is a mock of ResourceManagerService interface.
type MockResourceManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerServiceMockRecorder
}

// MockResourceManagerServiceMockRecorder is the mock recorder for MockResourceManagerService.
type MockResourceManagerServiceMockRecorder struct {
	mock *MockResourceManagerService
}

// NewMockResourceManagerService creates a new mock instance.
func NewMockResourceManagerService(ctrl *gomock.Controller) *MockResourceManagerService {
	mock := &MockResourceManagerService{ctrl: ctrl}
	mock.recorder = &MockResourceManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManagerService) EXPECT() *MockResourceManagerServiceMockRecorder {
	return m.recorder
}

// GetIamPolicy mocks base method.
func (m *MockResourceManagerService) GetIamPolicy(projectID string, request *cloudresourcemanager.GetIamPolicyRequest) google_cloud.IamPolicyGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIamPolicy", projectID, request)
	ret0, _ := ret[0].(google_cloud.IamPolicyGetter)
	return ret0
}

// GetIamPolicy indicates an expected call of GetIamPolicy.
func (mr *MockResourceManagerServiceMockRecorder) GetIamPolicy(projectID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamPolicy", reflect.TypeOf((*MockResourceManagerService)(nil).GetIamPolicy), projectID, request)
}

// List mocks base method.
func (m *MockResourceManagerService) List() google_cloud.ListProjectsGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(google_cloud.ListProjectsGetter)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockResourceManagerServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceManagerService)(nil).List))
}

// SetIamPolicy mocks base method.
func (m *MockResourceManagerService) SetIamPolicy(projectID string, request *cloudresourcemanager.SetIamPolicyRequest) google_cloud.IamPolicySetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIamPolicy", projectID, request)
	ret0, _ := ret[0].(google_cloud.IamPolicySetter)
	return ret0
}

// SetIamPolicy indicates an expected call of SetIamPolicy.
func (mr *MockResourceManagerServiceMockRecorder) SetIamPolicy(projectID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIamPolicy", reflect.TypeOf((*MockResourceManagerService)(nil).SetIamPolicy), projectID, request)
}

// MockIamPolicyGetter is a mock of IamPolicyGetter interface.
type MockIamPolicyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIamPolicyGetterMockRecorder
}

// MockIamPolicyGetterMockRecorder is the mock recorder for MockIamPolicyGetter.
type MockIamPolicyGetterMockRecorder struct {
	mock *MockIamPolicyGetter
}

// NewMockIamPolicyGetter creates a new mock instance.
func NewMockIamPolicyGetter(ctrl *gomock.Controller) *MockIamPolicyGetter {
	mock := &MockIamPolicyGetter{ctrl: ctrl}
	mock.recorder = &MockIamPolicyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIamPolicyGetter) EXPECT() *MockIamPolicyGetterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIamPolicyGetter) Do() (*cloudresourcemanager.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*cloudresourcemanager.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIamPolicyGetterMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIamPolicyGetter)(nil).Do))
}

// MockIamPolicySetter is a mock of IamPolicySetter interface.
type MockIamPolicySetter struct {
	ctrl     *gomock.Controller
	recorder *MockIamPolicySetterMockRecorder
}

// MockIamPolicySetterMockRecorder is the mock recorder for MockIamPolicySetter.
type MockIamPolicySetterMockRecorder struct {
	mock *MockIamPolicySetter
}

// NewMockIamPolicySetter creates a new mock instance.
func NewMockIamPolicySetter(ctrl *gomock.Controller) *MockIamPolicySetter {
	mock := &MockIamPolicySetter{ctrl: ctrl}
	mock.recorder = &MockIamPolicySetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIamPolicySetter) EXPECT() *MockIamPolicySetterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIamPolicySetter) Do() (*cloudresourcemanager.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*cloudresourcemanager.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIamPolicySetterMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIamPolicySetter)(nil).Do))
}

// MockIamService is a mock of IamService interface.
type MockIamService struct {
	ctrl     *gomock.Controller
	recorder *MockIamServiceMockRecorder
}

// MockIamServiceMockRecorder is the mock recorder for MockIamService.
type MockIamServiceMockRecorder struct {
	mock *MockIamService
}

// NewMockIamService creates a new mock instance.
func NewMockIamService(ctrl *gomock.Controller) *MockIamService {
	mock := &MockIamService{ctrl: ctrl}
	mock.recorder = &MockIamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIamService) EXPECT() *MockIamServiceMockRecorder {
	return m.recorder
}

// QueryGrantableRoles mocks base method.
func (m *MockIamService) QueryGrantableRoles(req *iam.QueryGrantableRolesRequest) google_cloud.RolesQueryGrantableRolesCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGrantableRoles", req)
	ret0, _ := ret[0].(google_cloud.RolesQueryGrantableRolesCall)
	return ret0
}

// QueryGrantableRoles indicates an expected call of QueryGrantableRoles.
func (mr *MockIamServiceMockRecorder) QueryGrantableRoles(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGrantableRoles", reflect.TypeOf((*MockIamService)(nil).QueryGrantableRoles), req)
}

// MockRolesQueryGrantableRolesCall is a mock of RolesQueryGrantableRolesCall interface.
type MockRolesQueryGrantableRolesCall struct {
	ctrl     *gomock.Controller
	recorder *MockRolesQueryGrantableRolesCallMockRecorder
}

// MockRolesQueryGrantableRolesCallMockRecorder is the mock recorder for MockRolesQueryGrantableRolesCall.
type MockRolesQueryGrantableRolesCallMockRecorder struct {
	mock *MockRolesQueryGrantableRolesCall
}

// NewMockRolesQueryGrantableRolesCall creates a new mock instance.
func NewMockRolesQueryGrantableRolesCall(ctrl *gomock.Controller) *MockRolesQueryGrantableRolesCall {
	mock := &MockRolesQueryGrantableRolesCall{ctrl: ctrl}
	mock.recorder = &MockRolesQueryGrantableRolesCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesQueryGrantableRolesCall) EXPECT() *MockRolesQueryGrantableRolesCallMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRolesQueryGrantableRolesCall) Do() (*iam.QueryGrantableRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*iam.QueryGrantableRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRolesQueryGrantableRolesCallMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRolesQueryGrantableRolesCall)(nil).Do))
}
