// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// APIIamRoleFilteringRulesRuleIDDeleteParams is parameters of DELETE /api/iam-role-filtering-rules/{ruleID} operation.
type APIIamRoleFilteringRulesRuleIDDeleteParams struct {
	// Rule id.
	RuleID string
}

func unpackAPIIamRoleFilteringRulesRuleIDDeleteParams(packed middleware.Parameters) (params APIIamRoleFilteringRulesRuleIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(string)
	}
	return params
}

func decodeAPIIamRoleFilteringRulesRuleIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params APIIamRoleFilteringRulesRuleIDDeleteParams, _ error) {
	// Decode path: ruleID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIIamRolesGetParams is parameters of GET /api/iam-roles operation.
type APIIamRolesGetParams struct {
	ProjectID string
}

func unpackAPIIamRolesGetParams(packed middleware.Parameters) (params APIIamRolesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "projectID",
			In:   "query",
		}
		params.ProjectID = packed[key].(string)
	}
	return params
}

func decodeAPIIamRolesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIIamRolesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: projectID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "projectID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProjectID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectID",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIRequestsGetParams is parameters of GET /api/requests operation.
type APIRequestsGetParams struct {
	Size PageSize
	// Page id.
	PageID int
}

func unpackAPIRequestsGetParams(packed middleware.Parameters) (params APIRequestsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		params.Size = packed[key].(PageSize)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageID",
			In:   "query",
		}
		params.PageID = packed[key].(int)
	}
	return params
}

func decodeAPIRequestsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIRequestsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Size = PageSize(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Size.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageID.
	{
		val := int(1)
		params.PageID = val
	}
	// Decode query: pageID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PageID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageID",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIRequestsRequestIDDeleteParams is parameters of DELETE /api/requests/{requestID} operation.
type APIRequestsRequestIDDeleteParams struct {
	// Request id.
	RequestID string
}

func unpackAPIRequestsRequestIDDeleteParams(packed middleware.Parameters) (params APIRequestsRequestIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestID",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeAPIRequestsRequestIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params APIRequestsRequestIDDeleteParams, _ error) {
	// Decode path: requestID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "requestID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIRequestsRequestIDPatchParams is parameters of PATCH /api/requests/{requestID} operation.
type APIRequestsRequestIDPatchParams struct {
	// Request id.
	RequestID string
}

func unpackAPIRequestsRequestIDPatchParams(packed middleware.Parameters) (params APIRequestsRequestIDPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestID",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeAPIRequestsRequestIDPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params APIRequestsRequestIDPatchParams, _ error) {
	// Decode path: requestID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "requestID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIUsersGetParams is parameters of GET /api/users operation.
type APIUsersGetParams struct {
	Size PageSize
	// Page id.
	PageID int
}

func unpackAPIUsersGetParams(packed middleware.Parameters) (params APIUsersGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		params.Size = packed[key].(PageSize)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageID",
			In:   "query",
		}
		params.PageID = packed[key].(int)
	}
	return params
}

func decodeAPIUsersGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIUsersGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Size = PageSize(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Size.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageID.
	{
		val := int(1)
		params.PageID = val
	}
	// Decode query: pageID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.PageID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageID",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIUsersUserIDPatchParams is parameters of PATCH /api/users/{userID} operation.
type APIUsersUserIDPatchParams struct {
	// User id.
	UserID string
}

func unpackAPIUsersUserIDPatchParams(packed middleware.Parameters) (params APIUsersUserIDPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "userID",
			In:   "path",
		}
		params.UserID = packed[key].(string)
	}
	return params
}

func decodeAPIUsersUserIDPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params APIUsersUserIDPatchParams, _ error) {
	// Decode path: userID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AuthGoogleCallbackGetParams is parameters of GET /auth/google/callback operation.
type AuthGoogleCallbackGetParams struct {
	CookieState OptString
	// The authorization code returned by Google.
	Code string
	// The state parameter to prevent CSRF attacks.
	QueryState string
}

func unpackAuthGoogleCallbackGetParams(packed middleware.Parameters) (params AuthGoogleCallbackGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.CookieState = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "query",
		}
		params.Code = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		params.QueryState = packed[key].(string)
	}
	return params
}

func decodeAuthGoogleCallbackGetParams(args [0]string, argsEscaped bool, r *http.Request) (params AuthGoogleCallbackGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: state.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "state",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCookieStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCookieStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CookieState.SetTo(paramsDotCookieStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode query: code.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Code = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.QueryState = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetParams is parameters of GET / operation.
type GetParams struct {
	// Access / when has session, use token to redirect request-form.
	Token OptString
}

func unpackGetParams(packed middleware.Parameters) (params GetParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.Token = v.(OptString)
		}
	}
	return params
}

func decodeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GetParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: token.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "token",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// RequestRequestIDGetParams is parameters of GET /request/{requestID} operation.
type RequestRequestIDGetParams struct {
	// Request id.
	RequestID string
}

func unpackRequestRequestIDGetParams(packed middleware.Parameters) (params RequestRequestIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "requestID",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeRequestRequestIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params RequestRequestIDGetParams, _ error) {
	// Decode path: requestID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "requestID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "requestID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
